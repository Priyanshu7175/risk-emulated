package controller.middleware.commands;

import controller.GameEngine;
import controller.MapInterface;
import helpers.exceptions.InvalidMapException;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StartupCommands extends Commands {

    public StartupCommands(String p_command) {
        super(p_command, new String[]{
                "loadmap",
                "gameplayer",
                "assigncountries",
                "showmap"
        });
    }

    @Override
    public boolean validateCommand()
    {
        Pattern pattern = Pattern.compile(
                "^loadmap\\s\\w+\\.map(\\s)*$|"+
                        "^assigncountries(\\s)*$|"+
                        "^showmap(\\s)*$|"+
                        "^gameplayer(?:(?:\\s+-add\\s+\\w+)*(?:\\s+-remove\\s+\\w+)*)*(\\s)*$"
        );
        Matcher matcher = pattern.matcher(d_command);
        return matcher.matches();
    }

    @Override
    void execute(GameEngine ge) {
        if (!this.validateCommand()) {
            ge.d_renderer.renderError("InvalidCommandException : Invalid Command Format.");
        }
        String[] l_command = d_command.trim().split("//s+");
        switch (l_command[0]){
            case "showmap":
                ge.d_renderer.showMap(false);
                break;
            case "loadmap":
                try {
                    MapInterface.loadMap(ge, l_command[1]);
                } catch (FileNotFoundException e) {
                    ge.d_renderer.renderError("FileNotFoundException : File does not exist.");
                } catch (NumberFormatException e) {
                    ge.d_renderer.renderError("NumberFormatException : File has incorrect formatting.");
                } catch (InvalidMapException e) {
                    ge.d_renderer.renderError("InvalidMapException : Map is disjoint or incorrect.");
                }
                break;
            case "assigncountries":
                break;
            case "gameplayer":
                createPlayerList(l_command);
        }
    }
    public void createPlayerList(String[] p_command)
    {   List<String> playersToAdd = new ArrayList<>();
        List<String> playersToRemove = new ArrayList<>();
        int i = 1;
        while(i<p_command.length)
        {
            String currOption = p_command[i];
            if(currOption.equals("-add"))
            {
                if(!playersToAdd.contains(p_command[i+1]))
                {
                    playersToAdd.add(p_command[i+1]);
                }
            }
            else {
                if(!playersToRemove.contains(p_command[i+1]))
                {
                    playersToRemove.add(p_command[i+1]);
                }
            }
            i+=2;
        }


    }




}
